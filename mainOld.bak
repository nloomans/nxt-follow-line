#include "NXCDefs.h"
#include "HTSMUX-driver.h"

void init () {
  SetSensor(S4, SENSOR_LOWSPEED);

  // Tell the SMUX to start scanning its ports.
  // this takes 500ms
  if (!HTSMUXscanPorts(S4)) {
    // Scan failed, handle the error
    TextOut(0, LCD_LINE1, "Scan failed!");
    Wait(1000);
  }

  SetSensorType(IN_1, SENSOR_TYPE_LIGHT_ACTIVE);

  if (!smuxSetSensorLegoLight(msensor_S4_1, true)) {
    TextOut(0, LCD_LINE1, "smux sens 1 failed!");
    Wait(1000);
  }
  if (!smuxSetSensorLegoLight(msensor_S4_2, true)) {
    TextOut(0, LCD_LINE1, "smux sens 2 failed!");
    Wait(1000);
  }
  if (!smuxSetSensorLegoLight(msensor_S4_3, true)) {
    TextOut(0, LCD_LINE1, "smux sens 3 failed!");
    Wait(1000);
  }
  if (!smuxSetSensorLegoLight(msensor_S4_4, true)) {
    TextOut(0, LCD_LINE1, "smux sens 4 failed!");
    Wait(1000);
  }
}

int sens (int num) {
  int ret;
  switch (num) {
    case 1:
      ret = Sensor(IN_1);
      break;
    case 2:
      ret = smuxSensorLegoLightNorm(msensor_S4_1);
      break;
    case 3:
      ret = smuxSensorLegoLightNorm(msensor_S4_2);
      break;
    case 4:
      ret = smuxSensorLegoLightNorm(msensor_S4_3);
      break;
    case 5:
      ret = smuxSensorLegoLightNorm(msensor_S4_4);
      break;
    default:
      TextOut(0, LCD_LINE1, "Error line 54: num can only be 0 to 4");
      Wait(1000);
  }
  return ret;
}

void followBlackLine() {
  // nu ga je dus de lijn volgen

  /*if (sens(1) ) {

  }
  else if () {
  
  }
  else*/ if (sens(2) <= 55) {
    OnRev(OUT_A, 75);
    OnFwd(OUT_C, 75);
  }
  else if (sens(3) <= 55) {

    OnFwd(OUT_A, 75);
    OnRev(OUT_C, 75);
  }
  else {
    OnFwd(OUT_AC, 75);
  }

  // als ik met mijn 4 sensoren niets meer zie,
  // dan status = 1
}

task main () {
  init();
  
  // 0 = zwarte lijn volgen
  // 1 = lijn kwijt
  int status = 0;
  
  while(true) {
    string output = NumToStr(sens(0)) + "-" + NumToStr(sens(1)) + "-" + NumToStr(sens(2)) + "-" + NumToStr(sens(3)) + "-" + NumToStr(sens(4));
    TextOut(0, LCD_LINE1, output);
    
    switch (status) {
      case 0:
        followBlackLine();
        break;
    }

  }
  

}
