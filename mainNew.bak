#include "NXCDefs.h"
#include "HTSMUX-driver.h"
//#define sensor1

int sen1 = false;
int sen2 = false;
int sen3 = false;
int sen4 = false;
int sen5 = false;

void init () {
  SetSensor(S4, SENSOR_LOWSPEED);



  // Tell the SMUX to start scanning its ports.
  // this takes 500ms
  if (!HTSMUXscanPorts(S4)) {
    // Scan failed, handle the error
    TextOut(0, LCD_LINE1, "Scan failed!");
    Wait(1000);
  }


  SetSensorType(IN_1, SENSOR_TYPE_LIGHT_ACTIVE);
  if (!smuxSetSensorLegoLight(msensor_S4_1, true)) {
    TextOut(0, LCD_LINE1, "smux sens 1 failed!");
    Wait(1000);
  }
  if (!smuxSetSensorLegoLight(msensor_S4_2, true)) {
    TextOut(0, LCD_LINE1, "smux sens 2 failed!");
    Wait(1000);
  }
  if (!smuxSetSensorLegoLight(msensor_S4_3, true)) {
    TextOut(0, LCD_LINE1, "smux sens 3 failed!");
    Wait(1000);
  }
  if (!smuxSetSensorLegoLight(msensor_S4_4, true)) {
    TextOut(0, LCD_LINE1, "smux sens 4 failed!");
    Wait(1000);
  }
}

int sens (int num) {
  int ret;
  switch (num) {
    case 1:
      ret = smuxSensorLegoLightNorm(msensor_S4_1);
      break;
    case 2:
      ret = smuxSensorLegoLightNorm(msensor_S4_2);
      break;
    case 3:
      ret = Sensor(IN_1);
      break;
    case 4:
      ret = smuxSensorLegoLightNorm(msensor_S4_3);
      break;
    case 5:
      ret = smuxSensorLegoLightNorm(msensor_S4_4);
      break;
    default:
      TextOut(0, LCD_LINE1, "Error line 54: num can only be 1 to 5");
      Wait(1000);
  }
  return ret;
}

void updateActive () {
  if (sens(1) < 55) {
    sen1 = true;
  }
  else {
    sen1 = false;
  }

  if (sens(2) < 60) {
    sen2 = true;
  }
  else {
    sen2 = false;
  }
  if (sens(3) < 500) {
    sen3 = true;
  }
  else {
    sen3 = false;
  }

  if (sens(4) < 60) {
    sen4 = true;
  }
  else {
    sen4 = false;
  }

  if (sens(5) < 60) {
    sen5 = true;
  }
  else {
    sen5 = false;
  }
}


void Move (int motorL, int motorR) {
  if (motorL == 0) {
    Off(OUT_A);
  }
  else if (motorL >= 0) {
    OnFwd(OUT_A, motorL);
  }
  else {
    OnRev(OUT_A, 0-motorL);
  }

  if (motorR == 0) {
    Off(OUT_C);
  }
  else if (motorR >= 0) {
    OnFwd(OUT_C, motorR);
  }
  else {
    OnRev(OUT_C, 0-motorR);
  }
}

task main () {
  init();

  while (true) {
    updateActive();

    if (sen2) {
      Move(75,75);
      Wait(200);
      Move(-75,75);
      until(sens(3) < 500);
    }
    else if (sen4) {
      Move(75,75);
      Wait(200);
      Move(75,-75);
      until(sens(3) < 500);
    }
    else if (sen1) {
      Move(75,75);
      Wait(200);
      Move(-75,100);
      until(sens(3) < 500);
    }
    else if (sen5) {
      Move(75,75);
      Wait(200);
      Move(100,-75);
      until(sens(3) < 500);
    }
    else {
      Move(75,75);
    }
    

    /*ClearScreen();

    NumOut(1, 1, sens(1));
    NumOut(20, 1, sens(2));
    NumOut(40, 1, sens(3));
    NumOut(65, 1, sens(4));
    NumOut(85, 1, sens(5)); */
  }


}
