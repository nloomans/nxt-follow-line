#include "NXCDefs.h"
#include "HTSMUX-driver.h"

int sen1 = false;
int sen2 = false;
int sen3 = false;
int sen4 = false;
int sen5 = false;
float senVal = 3;
float senCor = 3;
float senErr;


void init () {
  SetSensor(S4, SENSOR_LOWSPEED);
  


  // Tell the SMUX to start scanning its ports.
  // this takes 500ms
  if (!HTSMUXscanPorts(S4)) {
    // Scan failed, handle the error
    TextOut(0, LCD_LINE1, "Scan failed!");
    Wait(1000);
  }


  SetSensorType(IN_1, SENSOR_TYPE_LIGHT_ACTIVE);
  if (!smuxSetSensorLegoLight(msensor_S4_1, true)) {
    TextOut(0, LCD_LINE1, "smux sens 1 failed!");
    Wait(1000);
  }
  if (!smuxSetSensorLegoLight(msensor_S4_2, true)) {
    TextOut(0, LCD_LINE1, "smux sens 2 failed!");
    Wait(1000);
  }
  if (!smuxSetSensorLegoLight(msensor_S4_3, true)) {
    TextOut(0, LCD_LINE1, "smux sens 3 failed!");
    Wait(1000);
  }
  if (!smuxSetSensorLegoLight(msensor_S4_4, true)) {
    TextOut(0, LCD_LINE1, "smux sens 4 failed!");
    Wait(1000);
  }
}

int sens (int num) {
  int ret;
  switch (num) {
    case 1:
      ret = smuxSensorLegoLightNorm(msensor_S4_1);
      break;
    case 2:
      ret = smuxSensorLegoLightNorm(msensor_S4_2);
      break;
    case 3:
      ret = Sensor(IN_1);
      break;
    case 4:
      ret = smuxSensorLegoLightNorm(msensor_S4_3);
      break;
    case 5:
      ret = smuxSensorLegoLightNorm(msensor_S4_4);
      break;
    default:
      TextOut(0, LCD_LINE1, "Error line 54: num can only be 1 to 5");
      Wait(1000);
  }
  return ret;
}

void updateActive () {
  if (sens(1) < 55) {
    sen1 = true;
  }
  else {
    sen1 = false;
  }

  if (sens(2) < 60) {
    sen2 = true;
  }
  else {
    sen2 = false;
  }

  if (sens(3) < 60) {
    sen3 = true;
  }
  else {
    sen3 = false;
  }

  if (sens(4) < 60) {
    sen4 = true;
  }
  else {
    sen4 = false;
  }

  if (sens(5) < 60) {
    sen5 = true;
  }
  else {
    sen5 = false;
  }
}
void updateError () {
  if (sen2 && sen3) {
    senVal = 2.5;
  }
  else if (sen3 && sen4) {
    senVal = 3.5;
  }
  else if (sen1 && sen2) {
    senVal = 1.5;
  }
  else if (sen4 && sen5) {
    senVal = 4.5;
  }
  else if (sen3) {
    senVal = 3;
  }
  else if (sen2) {
    senVal = 2;
  }
  else if (sen4) {
    senVal = 4;
  }
  else if (sen1) {
    senVal = 1;
  }
  else if (sen5) {
    senVal = 5;
  }
  
  senErr = senCor - senVal;
  senErr = senErr*10;
}

task main () {
  init();

  while (true) {
    updateActive();
    updateError();

    OnFwd(OUT_A, 40 - senErr);
    OnFwd(OUT_C, 40 + senErr);

  }

  
}
